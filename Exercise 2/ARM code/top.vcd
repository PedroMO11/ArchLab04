$date
	Sun Jul 04 01:25:55 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! WriteData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 # DataAdr [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 & WriteData [31:0] $end
$var wire 32 ' ReadData [31:0] $end
$var wire 32 ( PC [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 ) Instr [31:0] $end
$var wire 32 * DataAdr [31:0] $end
$scope module arm $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 + WriteData [31:0] $end
$var wire 1 , RegWrite $end
$var wire 2 - RegSrc [1:0] $end
$var wire 32 . ReadData [31:0] $end
$var wire 1 / PCSrc $end
$var wire 32 0 PC [31:0] $end
$var wire 1 1 MemtoReg $end
$var wire 1 " MemWrite $end
$var wire 32 2 Instr [31:0] $end
$var wire 2 3 ImmSrc [1:0] $end
$var wire 1 4 ALUSrc $end
$var wire 32 5 ALUResult [31:0] $end
$var wire 4 6 ALUFlags [3:0] $end
$var wire 3 7 ALUControl [2:0] $end
$scope module c $end
$var wire 20 8 Instr [31:12] $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 , RegWrite $end
$var wire 1 9 RegW $end
$var wire 2 : RegSrc [1:0] $end
$var wire 1 / PCSrc $end
$var wire 1 ; PCS $end
$var wire 1 1 MemtoReg $end
$var wire 1 " MemWrite $end
$var wire 1 < MemW $end
$var wire 2 = ImmSrc [1:0] $end
$var wire 2 > FlagW [1:0] $end
$var wire 1 4 ALUSrc $end
$var wire 4 ? ALUFlags [3:0] $end
$var wire 3 @ ALUControl [2:0] $end
$scope module cl $end
$var wire 4 A Cond [3:0] $end
$var wire 2 B FlagWrite [1:0] $end
$var wire 1 " MemWrite $end
$var wire 1 / PCSrc $end
$var wire 1 , RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 9 RegW $end
$var wire 1 ; PCS $end
$var wire 1 < MemW $end
$var wire 4 C Flags [3:0] $end
$var wire 2 D FlagW [1:0] $end
$var wire 1 E CondEx $end
$var wire 4 F ALUFlags [3:0] $end
$scope module cc $end
$var wire 4 G Cond [3:0] $end
$var wire 4 H Flags [3:0] $end
$var wire 1 I ge $end
$var wire 1 J zero $end
$var wire 1 K overflow $end
$var wire 1 L neg $end
$var wire 1 M carry $end
$var reg 1 E CondEx $end
$upscope $end
$scope module flagreg0 $end
$var wire 1 $ clk $end
$var wire 2 N d [1:0] $end
$var wire 1 O en $end
$var wire 1 % reset $end
$var reg 2 P q [1:0] $end
$upscope $end
$scope module flagreg1 $end
$var wire 1 $ clk $end
$var wire 2 Q d [1:0] $end
$var wire 1 R en $end
$var wire 1 % reset $end
$var reg 2 S q [1:0] $end
$upscope $end
$upscope $end
$scope module dec $end
$var wire 6 T Funct [5:0] $end
$var wire 2 U Op [1:0] $end
$var wire 1 ; PCS $end
$var wire 4 V Rd [3:0] $end
$var wire 1 9 RegW $end
$var wire 2 W RegSrc [1:0] $end
$var wire 1 1 MemtoReg $end
$var wire 1 < MemW $end
$var wire 2 X ImmSrc [1:0] $end
$var wire 1 Y ByteSrc $end
$var wire 1 Z Branch $end
$var wire 1 4 ALUSrc $end
$var wire 1 [ ALUOp $end
$var reg 3 \ ALUControl [2:0] $end
$var reg 2 ] FlagW [1:0] $end
$var reg 11 ^ controls [10:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 3 _ ALUControl [2:0] $end
$var wire 1 4 ALUSrc $end
$var wire 1 ` ByteSrc $end
$var wire 2 a ImmSrc [1:0] $end
$var wire 1 1 MemtoReg $end
$var wire 1 / PCSrc $end
$var wire 2 b RegSrc [1:0] $end
$var wire 1 , RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 c WriteData [31:0] $end
$var wire 32 d SrcB [31:0] $end
$var wire 32 e SrcA [31:0] $end
$var wire 32 f Result [31:0] $end
$var wire 32 g ReadData [31:0] $end
$var wire 4 h RA2 [3:0] $end
$var wire 4 i RA1 [3:0] $end
$var wire 32 j PCPlus8 [31:0] $end
$var wire 32 k PCPlus4 [31:0] $end
$var wire 32 l PCNext [31:0] $end
$var wire 32 m PC [31:0] $end
$var wire 32 n Instr [31:0] $end
$var wire 32 o FinalResult [31:0] $end
$var wire 32 p ExtImm [31:0] $end
$var wire 32 q ByteResult [31:0] $end
$var wire 32 r ALUResult [31:0] $end
$var wire 4 s ALUFlags [3:0] $end
$scope module alu $end
$var wire 3 t ALUControl [2:0] $end
$var wire 1 u carry $end
$var wire 1 v overflow $end
$var wire 1 w zero $end
$var wire 33 x sum [32:0] $end
$var wire 1 y neg $end
$var wire 32 z b [31:0] $end
$var wire 32 { a [31:0] $end
$var wire 4 | ALUFlags [3:0] $end
$var reg 32 } Result [31:0] $end
$upscope $end
$scope module bproc $end
$var wire 32 ~ Result [31:0] $end
$var wire 32 !" BytePosition [31:0] $end
$var reg 32 "" ByteResult [31:0] $end
$upscope $end
$scope module ext $end
$var wire 2 #" ImmSrc [1:0] $end
$var wire 24 $" Instr [23:0] $end
$var reg 32 %" ExtImm [31:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 32 &" b [31:0] $end
$var wire 32 '" y [31:0] $end
$var wire 32 (" a [31:0] $end
$upscope $end
$scope module pcadd2 $end
$var wire 32 )" a [31:0] $end
$var wire 32 *" b [31:0] $end
$var wire 32 +" y [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 ," d0 [31:0] $end
$var wire 32 -" d1 [31:0] $end
$var wire 1 / s $end
$var wire 32 ." y [31:0] $end
$upscope $end
$scope module pcreg $end
$var wire 1 $ clk $end
$var wire 32 /" d [31:0] $end
$var wire 1 % reset $end
$var reg 32 0" q [31:0] $end
$upscope $end
$scope module ra1mux $end
$var wire 4 1" d0 [3:0] $end
$var wire 4 2" d1 [3:0] $end
$var wire 1 3" s $end
$var wire 4 4" y [3:0] $end
$upscope $end
$scope module ra2mux $end
$var wire 4 5" d0 [3:0] $end
$var wire 4 6" d1 [3:0] $end
$var wire 1 7" s $end
$var wire 4 8" y [3:0] $end
$upscope $end
$scope module resmux $end
$var wire 32 9" d0 [31:0] $end
$var wire 1 1 s $end
$var wire 32 :" y [31:0] $end
$var wire 32 ;" d1 [31:0] $end
$upscope $end
$scope module resultsrc $end
$var wire 8 <" d0 [7:0] $end
$var wire 8 =" d1 [7:0] $end
$var wire 1 ` s $end
$var wire 8 >" y [7:0] $end
$upscope $end
$scope module rf $end
$var wire 1 $ clk $end
$var wire 32 ?" r15 [31:0] $end
$var wire 4 @" ra1 [3:0] $end
$var wire 4 A" ra2 [3:0] $end
$var wire 4 B" wa3 [3:0] $end
$var wire 32 C" wd3 [31:0] $end
$var wire 1 , we3 $end
$var wire 32 D" rd2 [31:0] $end
$var wire 32 E" rd1 [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 F" d0 [31:0] $end
$var wire 32 G" d1 [31:0] $end
$var wire 1 4 s $end
$var wire 32 H" y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 32 I" a [31:0] $end
$var wire 1 $ clk $end
$var wire 32 J" rd [31:0] $end
$var wire 32 K" wd [31:0] $end
$var wire 1 " we $end
$upscope $end
$scope module imem $end
$var wire 32 L" a [31:0] $end
$var wire 32 M" rd [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11100000010011110000000000001111 M"
b0 L"
b1000 K"
bx J"
b0 I"
b1000 H"
b1111 G"
b1000 F"
b1000 E"
b1000 D"
b0 C"
b0 B"
b1111 A"
b1111 @"
b1000 ?"
b0 >"
b0 ="
b0 <"
bx ;"
b0 :"
b0 9"
b1111 8"
07"
b0 6"
b1111 5"
b1111 4"
03"
b1111 2"
b1111 1"
b0 0"
b100 /"
b100 ."
b0 -"
b100 ,"
b1000 +"
b100 *"
b100 )"
b0 ("
b100 '"
b100 &"
b1111 %"
b10011110000000000001111 $"
b0 #"
b0 ""
b1111 !"
b0 ~
b0 }
b100 |
b1000 {
b1000 z
0y
b0 x
1w
0v
0u
b1 t
b100 s
b0 r
b0 q
b1111 p
b0 o
b11100000010011110000000000001111 n
b0 m
b100 l
b100 k
b1000 j
b1111 i
b1111 h
bx g
b0 f
b1000 e
b1000 d
b1000 c
b0 b
b0 a
z`
b1 _
b10010 ^
b0 ]
b1 \
1[
0Z
0Y
b0 X
b0 W
b0 V
b0 U
b100 T
b0 S
0R
b1 Q
b0 P
0O
b0 N
0M
0L
0K
0J
1I
b0 H
b1110 G
b100 F
1E
b0 D
b0 C
b0 B
b1110 A
b1 @
b100 ?
b0 >
b0 =
0<
0;
b0 :
19
b11100000010011110000 8
b1 7
b100 6
b0 5
04
b0 3
b11100000010011110000000000001111 2
01
b0 0
0/
bx .
b0 -
1,
b1000 +
b0 *
b11100000010011110000000000001111 )
b0 (
bx '
b1000 &
1%
1$
b0 #
0"
b1000 !
$end
#5
0$
#10
1$
#15
0$
#20
1$
#22
0%
#25
0$
#30
b0 ="
b0 N
b0 q
b0 ""
0u
0y
14
b0xxxxxxxx o
b0xxxxxxxx -"
b0xxxxxxxx C"
bx >"
b0 7
b0 @
b0 \
b0 _
b0 t
b1010010 ^
b11111111 <"
b11111111 p
b11111111 !"
b11111111 %"
b11111111 G"
b0 i
b0 4"
b0 @"
b101000 T
b1 V
b0 Q
b11111111 f
b11111111 ~
b11111111 :"
b100000000001000011111111 $"
b1 B"
b1 6"
b0 1"
b11100010100000000001 8
b0 6
b0 ?
b0 F
b0 s
b0 |
0w
b11111111 #
b11111111 *
b11111111 5
b11111111 r
b11111111 }
b11111111 9"
b11111111 I"
b11111111 d
b11111111 z
b11111111 H"
b11100010100000000001000011111111 )
b11100010100000000001000011111111 2
b11100010100000000001000011111111 n
b11100010100000000001000011111111 M"
b11111111 x
b0 e
b0 {
b0 E"
b1100 !
b1100 &
b1100 +
b1100 c
b1100 D"
b1100 F"
b1100 K"
b1000 l
b1000 ."
b1000 /"
b1100 j
b1100 +"
b1100 ?"
b1000 k
b1000 '"
b1000 )"
b1000 ,"
b100 (
b100 0
b100 m
b100 ("
b100 0"
b100 L"
1$
#35
0$
#40
bx ="
bx0 N
bx <"
b0xxxxxxxx q
b0xxxxxxxx ""
xu
xy
bx Q
bx f
bx ~
bx :"
bx0 6
bx0 ?
bx0 F
bx0 s
bx0 |
xw
bx #
bx *
bx 5
bx r
bx }
bx 9"
bx I"
04
b0xxxxxxxx d
b0xxxxxxxx z
b0xxxxxxxx H"
bx x
b0xxxxxxxx e
b0xxxxxxxx {
b0xxxxxxxx E"
b10010 ^
b1 p
b1 !"
b1 %"
b1 G"
b1 h
b1 8"
b1 A"
b1 i
b1 4"
b1 @"
b1000 T
b10 V
b100000010010000000000001 $"
b10 B"
b10 6"
b1 5"
b1 1"
b11100000100000010010 8
b11100000100000010010000000000001 )
b11100000100000010010000000000001 2
b11100000100000010010000000000001 n
b11100000100000010010000000000001 M"
b0xxxxxxxx !
b0xxxxxxxx &
b0xxxxxxxx +
b0xxxxxxxx c
b0xxxxxxxx D"
b0xxxxxxxx F"
b0xxxxxxxx K"
b1100 l
b1100 ."
b1100 /"
b10000 j
b10000 +"
b10000 ?"
b1100 k
b1100 '"
b1100 )"
b1100 ,"
b1000 (
b1000 0
b1000 m
b1000 ("
b1000 0"
b1000 L"
1$
#45
0$
#50
0w
b0 N
b11000100 x
b0 Q
0u
b0 6
b0 ?
b0 F
b0 s
b0 |
0y
17"
0,
1"
b11000100 d
b11000100 z
b11000100 H"
b11000100 #
b11000100 *
b11000100 5
b11000100 r
b11000100 }
b11000100 9"
b11000100 I"
b10 -
b10 :
b10 W
b10 b
b1 3
b1 =
b1 X
b1 a
b1 #"
14
11
09
1<
0[
b0xxxxxxxx !
b0xxxxxxxx &
b0xxxxxxxx +
b0xxxxxxxx c
b0xxxxxxxx D"
b0xxxxxxxx F"
b0xxxxxxxx K"
b0 e
b0 {
b0 E"
b0 7
b0 @
b0 \
b0 _
b0 t
b10011101000 ^
b11000100 p
b11000100 !"
b11000100 %"
b11000100 G"
b10 h
b10 8"
b10 A"
b0 i
b0 4"
b0 @"
b1 U
b11000 T
b100000000010000011000100 $"
b100 5"
b0 1"
b11100101100000000010 8
b11100101100000000010000011000100 )
b11100101100000000010000011000100 2
b11100101100000000010000011000100 n
b11100101100000000010000011000100 M"
b10000 l
b10000 ."
b10000 /"
b10100 j
b10100 +"
b10100 ?"
b10000 k
b10000 '"
b10000 )"
b10000 ,"
b1100 (
b1100 0
b1100 m
b1100 ("
b1100 0"
b1100 L"
1$
#55
0$
#60
b0 N
0u
0y
b0x Q
07"
1,
0"
b110 7
b110 @
b110 \
b110 _
b110 t
b0 ="
b0x00 6
b0x00 ?
b0x00 F
b0x00 s
b0x00 |
xw
b0xxxxxxxx #
b0xxxxxxxx *
b0xxxxxxxx 5
b0xxxxxxxx r
b0xxxxxxxx }
b0xxxxxxxx 9"
b0xxxxxxxx I"
b0 -
b0 :
b0 W
b0 b
b0 3
b0 =
b0 X
b0 a
b0 #"
01
19
0<
1[
b1001101 d
b1001101 z
b1001101 H"
b0 q
b0 ""
bx !
bx &
bx +
bx c
bx D"
bx F"
bx K"
bx x
b0xxxxxxxx e
b0xxxxxxxx {
b0xxxxxxxx E"
b1010010 ^
b1001101 p
b1001101 !"
b1001101 %"
b1001101 G"
b1101 h
b1101 8"
b1101 A"
b1 i
b1 4"
b1 @"
b0 U
b100010 T
b11 V
b1000010011000001001101 $"
b11 B"
b11 6"
b1101 5"
b1 1"
b11100010001000010011 8
b11100010001000010011000001001101 )
b11100010001000010011000001001101 2
b11100010001000010011000001001101 n
b11100010001000010011000001001101 M"
b10100 l
b10100 ."
b10100 /"
b0xxxxxxxx f
b0xxxxxxxx ~
b0xxxxxxxx :"
b11000 j
b11000 +"
b11000 ?"
b10100 k
b10100 '"
b10100 )"
b10100 ,"
b10000 (
b10000 0
b10000 m
b10000 ("
b10000 0"
b10000 L"
bx '
bx .
bx g
bx ;"
bx J"
1$
#65
0$
#70
b0xxxxx o
b0xxxxx -"
b0xxxxx C"
b0xxxxx >"
b0xxxxx <"
b0xxxxx f
b0xxxxx ~
b0xxxxx :"
b0xxxxx #
b0xxxxx *
b0xxxxx 5
b0xxxxx r
b0xxxxx }
b0xxxxx 9"
b0xxxxx I"
b11111 d
b11111 z
b11111 H"
b11100 !
b11100 &
b11100 +
b11100 c
b11100 D"
b11100 F"
b11100 K"
b10 7
b10 @
b10 \
b10 _
b10 t
b11111 p
b11111 !"
b11111 %"
b11111 G"
b1111 h
b1111 8"
b1111 A"
b11 i
b11 4"
b11 @"
b100000 T
b100 V
b110100000000011111 $"
b100 B"
b100 6"
b1111 5"
b11 1"
b11100010000000110100 8
b11100010000000110100000000011111 )
b11100010000000110100000000011111 2
b11100010000000110100000000011111 n
b11100010000000110100000000011111 M"
b11000 l
b11000 ."
b11000 /"
b11100 j
b11100 +"
b11100 ?"
b11000 k
b11000 '"
b11000 )"
b11000 ,"
b10100 (
b10100 0
b10100 m
b10100 ("
b10100 0"
b10100 L"
1$
#75
0$
